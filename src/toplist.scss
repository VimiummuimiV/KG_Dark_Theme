@import "./data/variables";

#toplist {
  display: inline-flex !important;

  h3 {
    display: none !important;
  }

  .left-col {
    order: 0 !important;
    float: none !important;
    display: flex !important;
    flex-direction: column !important;
    height: 100% !important;
    min-width: 200px !important;
    margin: 0 !important;
    padding: 0 !important;
    position: sticky !important;
    top: 100px !important;

    h4 {
      color: $orange !important;
      font: 700 1.2em "Montserrat", sans-serif !important;
      text-transform: uppercase !important;
      padding: 2px 5px !important;
      margin: 15px 0 5px !important;
      border-radius: 3px !important;
      text-align: center !important;
    }

    ul.mode {
      display: flex !important;
      flex-direction: column !important;
      align-items: center !important;
      margin: 0 !important;

      li {
        left: 0 !important;
        position: relative !important;
        padding: 2px 5px !important;
        margin: 2px !important;
        width: 100% !important;
        display: flex !important;
        align-items: center !important;
        height: fit-content !important;
        min-height: 20px !important;
        border-radius: 3px !important;

        span {
          padding: 0 !important;
          padding: 2px 5px !important;
          background: transparent !important;
        }

        a {
          position: absolute !important;
          display: inline-flex !important;
          align-items: center !important;
          top: 0 !important;
          bottom: 0 !important;
          left: 10px;
          right: 0;
          z-index: 1 !important;
          text-decoration: none !important;

          img {
            visibility: hidden !important;
            height: 100% !important;
            width: 25px !important;
            top: 0 !important;
          }
        }

        a[href*="/vocs/"] {
          left: 0 !important;
          width: 25px !important;
          border-radius: 3px 0 0 3px !important;
          mix-blend-mode: lighten !important;
        }

        a.gametype-voc {
          left: 25px !important;
          padding-left: 5px !important;
          border-radius: 0 3px 3px 0 !important;
          white-space: nowrap !important;
          overflow: hidden !important;
        }

        &:hover {
          background: darken($lightblue, 40%) !important;
        }

        &.gametype-voc {
          position: relative !important;

          span {
            margin: 0 0 0 25px !important;
          }

          a {
            &:hover {
              background-color: darken($lightblue, 30%) !important;
            }
          }

          &::before {
            content: "" !important;
            position: absolute !important;
            top: 0 !important;
            left: 0 !important;
            display: inline-flex !important;
            width: 24px !important;
            height: 100% !important;
            background: $book-icon !important;
          }
        }

        &.active {
          background: darken($lightblue, 40%) !important;
        }
      }

      // Create a map of all gametypes (using existing variables from variables.scss)
      $gametypes: (
        "normal": $gametype-normal,
        "quote": $gametype-quote,
        "sprint": $gametype-sprint,
        "marathon": $gametype-marathon,
        "noerror": $gametype-noerror,
        "noerrorcnt": $gametype-noerrorcnt,
        "abra": $gametype-abra,
        "abra-premium": $gametype-abra-premium,
        "digits": $gametype-digits,
        "referats": $gametype-referats,
        "voc": $gametype-voc,
        "chars": $gametype-chars,
        "qual": $gametype-qual,
      );

      // Generate styles for all gametypes dynamically
      @each $name, $color in $gametypes {
        li:has(.gametype-#{$name}) {
          &.active,
          &:hover {
            background: darken($color, 40%) !important;
          }
        }
      }
    }
  }

  .content-col {
    display: flex !important;
    flex-direction: column !important;
    align-items: center !important;
    order: 1 !important;
    margin: 0 !important;
    padding: 0 10px !important;
    width: 100% !important;

    .search-position {
      width: 100% !important;

      .search-self {
        background: $deepgray $position-icon / 24px !important;
        border-radius: 5px !important;
        border: 1px solid $gray !important;
        width: 60px !important;
        height: 100% !important;
        padding: 0 !important;
        margin-right: 10px !important;
        transition: background 0.15s ease !important;
        cursor: pointer !important;

        &:hover {
          background: $black $position-icon / 24px !important;
          border-color: $lightblue !important;
        }

        a {
          font-size: 0 !important;
          display: inline-flex !important;
          height: 100% !important;
          width: 100% !important;
        }
      }
    }

    table {
      width: 100% !important;
    }
  }

  .right-col {
    order: 2 !important;
    float: none !important;
    display: flex !important;
    flex-direction: column !important;
    margin: 0 !important;
    padding: 0 !important;
    position: fixed !important;
    top: 50% !important;
    right: 10px !important;
    transform: translateY(-50%) !important;
    width: 50px !important;
    height: 50px !important;
    z-index: 10 !important;
    cursor: pointer !important;

    // Fade-in animation
    opacity: 0;
    animation: fadeIn 3s ease-in-out 0s 1 forwards !important;

    .info {
      position: absolute !important;
      background: $black $rating-info-icon 15px center / 32px !important;
      width: 500px !important; // Set to final expanded width
      height: 50px !important; // Set to final expanded height
      overflow: hidden !important;
      border-radius: 5px !important;
      right: 0 !important;
      top: 50% !important;
      transform: translateY(-50%) translateX(calc(100% - 50px)) !important; // Hide most of it off-screen
      transition: transform 0.3s ease !important; // Move transition to base state

      p {
        opacity: 0 !important;
        transition: opacity 0.3s ease !important;  
      }

      &:hover {
        height: fit-content !important; // Expand to fit content
        transform: translateY(-50%) translateX(0) !important; // Slide it fully into view
        background: $black !important;

        p {
          opacity: 1 !important;
        }
      }
    }
  }

  // Keyframe animation for fade-in effect
  @keyframes fadeIn {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }
}
