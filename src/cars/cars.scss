@import "../variables";
@import "data/defaults";
@import "data/exclusive";
@import "mask";

// Shadow configuration
$shadow-fade-width: 20%; // Controls the fade width on each side (affects shadow length)
$shadow-opacity: 0.3; // Controls the darkness of the shadow (affects smoothness)

// Map of car background sizes
$car-sizes: (
  "car3": (
    size: 1000px 500px,
  ),
  "car15": (
    size: 1000px 300px,
  ),
);

// Function to get car data
@function get-car-data($car-key) {
  @return map-get($car-sizes, $car-key);
}

// Mixin for mask positions
@mixin mask-position($base-num) {
  .car .car-base_#{$base-num} {
    &::before {
      background-position: #{-100px * ($base-num + 1)} 0 !important;
      background-repeat: no-repeat !important;
      background-size: auto !important;
    }
  }
}

// Mixin for car shadow (uniform for all cars)
@mixin car-shadow {
  &::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 5%;
    background: radial-gradient(
          ellipse at center,
          rgba(0, 0, 0, 0.5) 0%,
          transparent 70%
        )
        no-repeat 10% 100% / 50px 20px,
      radial-gradient(ellipse at center, rgba(0, 0, 0, 0.5) 0%, transparent 70%)
        no-repeat 90% 100% / 50px 20px,
      linear-gradient(
          to right,
          transparent 0%,
          rgba(0, 0, 0, $shadow-opacity) $shadow-fade-width,
          rgba(0, 0, 0, $shadow-opacity) calc(100% - #{$shadow-fade-width}),
          transparent 100%
        )
        no-repeat 0 0 / 100% 100%;
    z-index: 1;
  }
}

// Mixin for creating car styles with pseudo elements
@mixin car-style($car-class, $variable-name, $car-key: null) {
  $car-data: null;
  @if $car-key {
    $car-data: get-car-data($car-key);
  } @else {
    $car-data: get-car-data($car-class);
  }

  $size: 500px 200px; // Default size
  @if type-of($car-data) == map {
    $size: map-get($car-data, size);
  } @else if $car-data {
    $size: $car-data;
  }

  div[class*="car-base"].#{$car-class} {
    position: relative;

    &::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: $variable-name;
      background-repeat: no-repeat !important;
      background-size: $size !important;
      background-position: center center !important;
      pointer-events: none;
      z-index: 1;
    }
  }
}

// Mixin for creating car styles with multiple classes
@mixin car-group($car-classes, $variable-name, $car-key: null) {
  @each $class in $car-classes {
    $car-data: null;
    @if $car-key {
      $car-data: get-car-data($car-key);
    } @else {
      $car-data: get-car-data($class);
    }

    $size: 500px 250px; // Default size
    @if type-of($car-data) == map {
      $size: map-get($car-data, size);
    } @else if $car-data {
      $size: $car-data;
    }

    div[class*="car-base"].#{$class} {
      position: relative;

      &::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: $variable-name;
        background-repeat: no-repeat !important;
        background-size: $size !important;
        pointer-events: none;
        z-index: 1;
      }
    }
  }
}

/* ===== FIXES ===== */
.profile-car .shop.tuning .car .imgcont {
  background: $darkgray !important;
}

// Global z-index for car tuning elements
.car .car-tuning {
  z-index: 10 !important;
}

/* ===== STANDARD CARS ===== */
// Merge SVG car maps from defaults and exclusive
$svg-cars: map-merge($svg-cars-defaults, $svg-cars-exclusive);

// Dynamically generate car selectors and backgrounds from $svg-cars
@each $car-key, $svg in $svg-cars {
  // Determine class name: if key is number, use car#{$car-key}; else use key as-is
  $class-name: if(type-of($car-key) == "number", "car#{$car-key}", $car-key);
  $car-size-data: map-get($car-sizes, $car-key);
  $size: if(
    type-of($car-size-data) == map and map-has-key($car-size-data, size),
    map-get($car-size-data, size),
    500px 200px
  );

  div[class*="car-base"].#{$class-name} {
    position: relative;
    &::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: if(
        type-of(map-get($processed-svg-cars, $car-key)) == "string",
        map-get($processed-svg-cars, $car-key),
        map-get($svg-cars, $car-key)
      );
      background-repeat: no-repeat !important;
      background-size: #{$size} !important;
      pointer-events: none;
      z-index: 1;
    }
  }
}

// Apply uniform shadow to all cars
div[class*="car-base"] {
  @include car-shadow;
}

// Assign processed SVG to $car1 for correct background
$car1: map-get($processed-svg-cars, "car1");

// Apply car1 SVG background to .imgcont containing .car1[style*="background-color: #777"]
.imgcont:has(.car1[style*="background-color: #777"]) {
  position: relative;
  background-color: $middlegray !important;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: $car1 !important;
    background-repeat: no-repeat !important;
    background-size: 500px 200px !important;
    z-index: 1;
  }

  @include car-shadow;
}

// Assign processed SVG to $car5 for correct background
$car5: map-get($processed-svg-cars, "car5");

// Apply car5 SVG background to .car .car5.car-tuning2_0
.car .car5.car-tuning2_0 {
  mask: $car5 no-repeat 0px -100px / 500px 200px, linear-gradient(#000 0 0) !important;
  mask-composite: exclude !important;
}

/* ===== CAR POSITION PRIORITIES FIX ===== */
@for $i from 0 through 13 {
  @include mask-position($i);
}
