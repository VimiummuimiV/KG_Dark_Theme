@import "../variables";
@import "data/defaults";
@import "data/exclusive";
@import "mask";
@import "car-config";

// Mixin for mask positions
@mixin mask-position($base-num) {
  .car .car-base_#{$base-num} {
    &::before {
      background-position: #{-100px * ($base-num + 1)} 0 !important;
      background-repeat: no-repeat !important;
      background-size: auto !important;
    }
  }
}

// Mixin for creating car styles with pseudo elements
@mixin car-style($car-class, $variable-name, $car-key: null) {
  $config-key: if($car-key, $car-key, $car-class);
  $size: get-car-config($config-key, size);

  div[class*="car-base"].#{$car-class} {
    position: relative;

    &::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: $variable-name;
      background-repeat: no-repeat !important;
      background-size: $size !important;
      background-position: center center !important;
      pointer-events: none;
      z-index: 1;
    }
    
    // Apply shadow with automatic fallback to defaults
    @include car-shadow($config-key);
  }
}

// Mixin for creating car styles with multiple classes
@mixin car-group($car-classes, $variable-name, $car-key: null) {
  @each $class in $car-classes {
    $config-key: if($car-key, $car-key, $class);
    $size: get-car-config($config-key, size);

    div[class*="car-base"].#{$class} {
      position: relative;

      &::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: $variable-name;
        background-repeat: no-repeat !important;
        background-size: $size !important;
        pointer-events: none;
        z-index: 1;
      }
      
      // Apply shadow with automatic fallback to defaults
      @include car-shadow($config-key);
    }
  }
}

/* ===== FIXES ===== */
.profile-car .shop.tuning .car .imgcont {
  background: $darkgray !important;
}

// Global z-index for car tuning elements
.car .car-tuning {
  z-index: 10 !important;
}

/* ===== STANDARD CARS ===== */
// Merge SVG car maps from defaults and exclusive
$svg-cars: map-merge($svg-cars-defaults, $svg-cars-exclusive);

// Dynamically generate car selectors and backgrounds from $svg-cars
@each $car-key, $svg in $svg-cars {
  // Determine class name: if key is number, use car#{$car-key}; else use key as-is
  $class-name: if(type-of($car-key) == "number", "car#{$car-key}", $car-key);
  $size: get-car-config($car-key, size);

  div[class*="car-base"].#{$class-name} {
    position: relative;
    &::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: if(
        type-of(map-get($processed-svg-cars, $car-key)) == "string",
        map-get($processed-svg-cars, $car-key),
        map-get($svg-cars, $car-key)
      );
      background-repeat: no-repeat !important;
      background-size: #{$size} !important;
      pointer-events: none;
      z-index: 1;
    }
    
    // Apply shadow with automatic property fallback
    @include car-shadow($car-key);
  }
}

// Assign processed SVG to $car1 for correct background
$car1: map-get($processed-svg-cars, "car1");

// Apply car1 SVG background to .imgcont containing .car1[style*="background-color: #777"]
.imgcont:has(.car1[style*="background-color: #777"]) {
  position: relative;
  background-color: $middlegray !important;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: $car1 !important;
    background-repeat: no-repeat !important;
    background-size: get-car-config("car1", size) !important;
    z-index: 1;
  }

  @include car-shadow("car1");
}

// Assign processed SVG to $car5 for correct background
$car5: map-get($processed-svg-cars, "car5");

// Apply car5 SVG background to .car .car5.car-tuning2_0
.car .car5.car-tuning2_0 {
  $car5-size: get-car-config("car5", size);
  mask: $car5 no-repeat 0px -100px / #{$car5-size}, linear-gradient(#000 0 0) !important;
  mask-composite: exclude !important;
}

/* ===== CAR POSITION PRIORITIES FIX ===== */
@for $i from 0 through 13 {
  @include mask-position($i);
}
