@import "../variables";
@import "./data/defaults";
@import "./data/exclusive";

// ===============================================
// SVG Stroke Inset System - Simple & Working
// ===============================================

// Global inset configuration
$default-stroke-width: 0.4 !default; // Stroke width controls inset depth
$default-color: $darkgray !default; // Default fill/stroke color
$default-stroke-opacity: 30 !default; // Default full opacity (0-100)

// String replacement helper
@function str-replace($string, $search, $replace: "") {
  @if str-length($search) == 0 { @return $string; }
  $out: "";
  $len: str-length($search);
  $pos: str-index($string, $search);
  @while $pos {
    $out: $out + str-slice($string, 1, $pos - 1) + $replace;
    $string: str-slice($string, $pos + $len);
    $pos: str-index($string, $search);
  }
  @return $out + $string;
}

// Encode SVG for data URL
@function svg-encode($svg) {
  $svg: str-replace($svg, '#', '%23');
  $svg: str-replace($svg, '<', '%3C');
  $svg: str-replace($svg, '>', '%3E');
  $svg: str-replace($svg, '"', "'");
  @return $svg;
}

@function svg-url($svg) {
  @return url("data:image/svg+xml;utf8,#{svg-encode($svg)}");
}

// Convert 0-100 opacity to hex
@function opacity-to-hex($o) {
  $v: round(if($o < 0, 0, if($o > 100, 100, $o)) * 2.55);
  $h: "0123456789ABCDEF";
  @return str-slice($h, floor($v / 16) + 1, floor($v / 16) + 1) + str-slice($h, ($v % 16) + 1, ($v % 16) + 1);
}

// Add stroke to SVG paths with opacity support
@function add-stroke($svg, $stroke-width: $default-stroke-width, $fill-color: null, $stroke-opacity: $default-stroke-opacity) {
  $color: if($fill-color != null, $fill-color, $default-color);
  $fill: inspect($color);
  $stroke: inspect($color) + opacity-to-hex($stroke-opacity);
  @return str-replace($svg, "<path", "<path fill=\"#{$fill}\" stroke=\"#{$stroke}\" stroke-width=\"#{$stroke-width}\"");
}

// Main function: process SVG and return CSS background URL
@function svg-stroke($svg, $stroke-width: $default-stroke-width, $fill-color: null, $stroke-opacity: $default-stroke-opacity) {
  @return svg-url(add-stroke($svg, $stroke-width, $fill-color, $stroke-opacity));
}

// Short function name for convenience
@function car($svg, $stroke-width: $default-stroke-width, $fill-color: null, $stroke-opacity: $default-stroke-opacity) {
  @return svg-stroke($svg, $stroke-width, $fill-color, $stroke-opacity);
}

// ============== PROCESS ==============

// Merge SVG car maps from defaults and exclusive
$svg-cars: map-merge($svg-cars-defaults, $svg-cars-exclusive);

// Batch process all SVG cars
$processed-svg-cars: ();
@each $name, $svg in $svg-cars {
  $processed-svg-cars: map-merge(
    $processed-svg-cars,
    (
      $name: car($svg),
    )
  ) !global;
}
