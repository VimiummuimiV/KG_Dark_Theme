@import "../variables";
@import "data/defaults";
@import "data/exclusive";

// ===============================================
// SVG Stroke Inset System - Simple & Working
// ===============================================

// Global inset configuration
$default-stroke-width: 0.5 !default; // Stroke width controls inset depth
$default-color: $darkgray !default; // Default fill/stroke color

// String replacement helper (non-recursive)
@function str-replace($string, $search, $replace: "") {
  $result: $string;
  @while str-index($result, $search) {
    $index: str-index($result, $search);
    $result: str-slice($result, 1, $index - 1) +
      $replace +
      str-slice($result, $index + str-length($search));
  }
  @return $result;
}

// ...removed extract-fill-color function...

// Convert SVG to data URL directly (no encoding)
@function svg-url($svg) {
  @return url("data:image/svg+xml;utf8,#{$svg}");
}

// Add stroke to SVG paths
@function add-stroke(
  $svg,
  $stroke-width: $default-stroke-width,
  $fill-color: null
) {
  // Use provided fill color or default
  $color: if($fill-color != null, $fill-color, $default-color);

  // Add fill, stroke, and stroke-width attributes compactly
  $attrs: 'fill="#{$color}" stroke="#{$color}" stroke-width="#{$stroke-width}"';
  $result: str-replace($svg, "<path", "<path #{$attrs}");
  @return $result;
}

// Main function: process SVG and return CSS background URL
@function svg-stroke(
  $svg,
  $stroke-width: $default-stroke-width,
  $fill-color: null
) {
  $processed: add-stroke($svg, $stroke-width, $fill-color);
  @return svg-url($processed);
}

// Short function name for convenience
@function car($svg, $stroke-width: $default-stroke-width, $fill-color: null) {
  @return svg-stroke($svg, $stroke-width, $fill-color);
}

// ============== PROCESS ==============
// Define a map of car SVGs (example, extend as needed)
$cars: (
  car1: $car1,
  car2: $car2,
  car3: $car3,
);

// Batch process all cars in the map
$processed-cars: ();
@each $name, $svg in $cars {
  $processed-cars: map-merge(
    $processed-cars,
    (
      $name: car($svg),
    )
  );
}
