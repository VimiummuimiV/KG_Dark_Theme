@import "../variables";
@import "./data/defaults";
@import "./data/exclusive";

// ===============================================
// SVG Stroke Inset System - Simple & Working
// ===============================================

// Global inset configuration
$default-stroke-width: 0.3 !default; // Stroke width controls inset depth
$default-color: $darkgray !default; // Default fill/stroke color

// String replacement helper
@function str-replace($string, $search, $replace: "") {
  @if str-length($search) == 0 { @return $string; }
  $out: "";
  $len: str-length($search);
  $pos: str-index($string, $search);

  @while $pos {
    $out: $out + str-slice($string, 1, $pos - 1) + $replace;
    $string: str-slice($string, $pos + $len);
    $pos: str-index($string, $search);
  }

  @return $out + $string;
}


// No need to extract fill color, always use $default-color

// Convert SVG to data URL directly (no encoding)
// Encode SVG for data URL
@function svg-encode($svg) {
  $svg: str-replace($svg, '#', '%23');
  $svg: str-replace($svg, '<', '%3C');
  $svg: str-replace($svg, '>', '%3E');
  $svg: str-replace($svg, '"', "'");
  @return $svg;
}

@function svg-url($svg) {
  @return url("data:image/svg+xml;utf8,#{svg-encode($svg)}");
}

// Add stroke to SVG paths
@function add-stroke(
  $svg,
  $stroke-width: $default-stroke-width,
  $fill-color: null
) {
  // Use provided fill color or default
  $color: if($fill-color != null, $fill-color, $default-color);

  // Add fill, stroke, and stroke-width attributes compactly
  $attrs: 'fill="#{$color}" stroke="#{$color}" stroke-width="#{$stroke-width}"';
  $result: str-replace($svg, "<path", "<path #{$attrs}");
  @return $result;
}

// Main function: process SVG and return CSS background URL
@function svg-stroke(
  $svg,
  $stroke-width: $default-stroke-width,
  $fill-color: null
) {
  $processed: add-stroke($svg, $stroke-width, $fill-color);
  @return svg-url($processed);
}

// Short function name for convenience
@function car($svg, $stroke-width: $default-stroke-width, $fill-color: null) {
  @return svg-stroke($svg, $stroke-width, $fill-color);
}

// ============== PROCESS ==============
// Merge SVG car maps from defaults and exclusive
$svg-cars: map-merge($svg-cars-defaults, $svg-cars-exclusive);

// Batch process all SVG cars
$processed-svg-cars: ();
@each $name, $svg in $svg-cars {
  $processed-svg-cars: map-merge(
    $processed-svg-cars,
    (
      $name: car($svg),
    )
  ) !global;
}
