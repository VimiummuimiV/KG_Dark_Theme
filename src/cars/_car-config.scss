// Simplified centralized configuration for all car properties

// Unified car configuration map - only specify what you want to override

$car-configs-defaults: (
  // ZAZ_965
  "car1":
    (
      shadow-width: 70%,
      shadow-space: 30%,
      shadow-offset-x: 2px,
    ),
  // VAZ_2104
  "car2":
    (
      shadow-width: 80%,
      shadow-space: 45%,
      shadow-offset-x: 3.5px,
    ),
  // Belarus_922
  "car3":
    (
      size: 1000px 500px,
      shadow-width: 90%,
      shadow-space: 40%,
    ),
  // Peugeot_Boxer
  "car4":
    (
      shadow-width: 100%,
      shadow-space: 40%,
    ),
  // Fiat_Strada
  "car5":
    (
      shadow-width: 90%,
      shadow-space: 40%,
    ),
  // Hummer_H3
  "car6":
    (
      shadow-width: 90%,
      shadow-space: 50%,
      shadow-offset-x: 4px,
    ),
  // Daewoo_Matiz
  "car7":
    (
      shadow-width: 80%,
      shadow-space: 40%,
    ),
  // Ford_Focus_Mk2
  "car8":
    (
      shadow-width: 95%,
      shadow-space: 40%,
      shadow-offset-y: 1px,
    ),
  // Toyota_Land_Cruiser
  "car9":
    (
      shadow-width: 90%,
      shadow-space: 45%,
      shadow-offset-x: 4px,
    ),
  // Volkswagen_Passat_B3
  "car10":
    (
      shadow-width: 80%,
      shadow-space: 55%,
      shadow-offset-x: 1px,
    ),
  // Mitsubishi_Lancer_X
  "car11":
    (
      shadow-width: 95%,
      shadow-space: 40%,
      shadow-offset-y: 2px,
    ),
  // BMW_X6
  "car12":
    (
      shadow-width: 98%,
      shadow-space: 50%,
      shadow-offset-x: 2.5px,
    ),
  // Audi_TT
  "car13":
    (
      shadow-width: 90%,
      shadow-space: 35%,
    ),
  // Bugatti_Veyron
  "car14":
    (
      shadow-width: 95%,
      shadow-space: null,
      shadow-offset-y: 1px,
    ),
  // Bolid_F1
  "car15":
    (
      size: 1000px 300px,
      shadow-width: 95%,
      shadow-space: null,
    ),
  // Lamborghini_Murcielago
  "car16":
    (
      shadow-width: 88%,
      shadow-space: 40%,
      shadow-offset-y: 1px,
    ),
  // Batmobile
  "car17":
    (
      shadow-width: 95%,
      shadow-space: 40%,
    ),
  // Aeroglisser
  "car18":
    (
      size: 1000px 300px,
      shadow-width: 80%,
      shadow-space: null,
      shadow-height: 20%,
      shadow-opacity: 0.2,
      shadow-offset-y: 4px,
    ),
  // Duesenberg_Speedster
  "car19":
    (
      shadow-width: 100%,
      shadow-space: 50%,
      shadow-offset-x: 4px,
    ),
  // NLO
  "car20":
    (
      shadow-height: 30%,
      shadow-width: 55%,
      shadow-space: null,
      shadow-opacity: 0.15,
    ),
  // Ferrari_FX_Concept
  "car22":
    (
      shadow-width: 95%,
      shadow-space: null,
      shadow-offset-y: 2.5px,
    ),
  // Smart_Fortwo
  "car23":
    (
      shadow-width: 75%,
    ),
  // SS-1
  "car25":
    (
      shadow-width: 90%,
      shadow-height: 25%,
      shadow-space: null,
      shadow-opacity: 0.2,
    ),
  // Volkswagen_Beetle
  "car26":
    (
      shadow-width: 80%,
    ),
  // Dodge_Viper
  "car27":
    (
      shadow-width: 95%,
      shadow-space: null,
    ),
  // Citroen_Hypnos
  "car28":
    (
      shadow-width: 90%,
      shadow-space: 40%,
      shadow-offset-x: 2px,
    ),
  // Renault_Megane
  "car29":
    (
      shadow-width: 90%,
      shadow-space: 40%,
    ),
  // Subaru_Tourer
  "car30":
    (
      shadow-width: 95%,
      shadow-space: null,
    ),
  // Tram
  "car31":
    (
      shadow-width: 100%,
      shadow-space: null,
    ),
  // Insecator
  "car32":
    (
      shadow-width: 100%,
      shadow-space: null,
    ),
  // Bugatti_Galibier
  "car33":
    (
      shadow-width: 100%,
      shadow-space: null,
    ),
  // Chevrolet_Orlando
  "car34":
    (
      shadow-width: 95%,
      shadow-space: 40%,
    ),
  // Ferrari_250_Testa_Rossa
  "car35":
    (
      shadow-width: 83%,
      shadow-space: 50%,
    ),
  // Ferrari_Zobin
  "car36":
    (
      shadow-width: 90%,
      shadow-space: null,
    ),
  // Nissan_Round_Box
  "car37":
    (
      shadow-offset-x: -4px,
    ),
  // UAZ_3151_Hunter
  "car38":
    (
      shadow-width: 90%,
    ),
  // Danny_Chhang_Concept
  "car39":
    (
      shadow-width: 95%,
      shadow-space: null,
    ),
  // Chevrolet_EN-V
  "car40":
    (
      shadow-height: 20%,
      shadow-width: 50%,
      shadow-space: null,
      shadow-opacity: 0.2,
    ),
  // LM_Rally_Fighter
  "car41":
    (
      shadow-height: 35%,
      shadow-width: 100%,
      shadow-space: 60%,
      shadow-offset-y: 1px,
    ),
  // SS-X
  "car42":
    (
      shadow-width: 70%,
      shadow-height: 25%,
      shadow-space: null,
      shadow-opacity: 0.2,
    ),
  // Porsche_Cayenne_S
  "car43":
    (
      size: 900px 500px,
      shadow-width: 95%,
      shadow-space: 50%,
      shadow-offset-x: 2px,
    ),
  // Honda_CBR_1000RR
  "car44":
    (
      shadow-width: 60%,
      shadow-space: 30%,
      shadow-offset-y: 4px,
      shadow-offset-x: -4px,
    ),
  // Caravelle
  "car45":
    (
      shadow-offset-y: -7px,
    )
);

$car-configs-exclusive: (
  // Batpod
  "car1011":
    (
      shadow-width: 100%,
      shadow-space: 40%,
    ),
  // Dinosaure
  "car1018":
    (
      shadow-width: 90%,
      shadow-height: 30%,
      shadow-opacity: 0.2,
      shadow-space: null,
      shadow-offset-x: -5px,
    ),
  // Tumbler
  "car1023":
    (
      shadow-width: 95%,
      shadow-height: 30%,
      shadow-space: null,
      shadow-offset-y: 1.5px,
    )
);

$car-configs: map-merge($car-configs-defaults, $car-configs-exclusive);

// Default values - used when properties are missing from car configs
$default-car-config: (
  size: 500px 200px,
  shadow-height: 15%,
  // Default shadow covers 80% of car width
  shadow-width: 80%,
  // Default smoothness for all transitions
  shadow-smoothness: 10%,
  // Default space between wheel shadows (center area width)
  shadow-space: 35%,
  // Base shadow opacity (controls overall intensity)
  shadow-opacity: 0.3,
  // Wheel areas are 1.5x the base opacity
  shadow-wheel-multiplier: 1.5,
  // Center area is 0.5x the base opacity
  shadow-center-multiplier: 0.5,
  // Horizontal offset (positive = right, negative = left)
  shadow-offset-x: 0px,
  // Vertical offset (positive = down, negative = up)
  shadow-offset-y: 0px,
);

// Function to get car configuration with automatic fallback to defaults
@function get-car-config($car-key, $property: null) {
  $user-config: map-get($car-configs, $car-key);

  // If specific property requested
  @if $property {
    // Try to get from user config first
    @if $user-config {
      $user-value: map-get($user-config, $property);
      // Check for null explicitly - don't fallback to default if user set null
      @if $user-value != null {
        @return $user-value;
      } @else if map-has-key($user-config, $property) {
        // User explicitly set null
        @return null;
      }
    }
    // Fallback to default
    @return map-get($default-car-config, $property);
  }

  // If returning full config, merge user config with defaults
  @if $user-config {
    @return map-merge($default-car-config, $user-config);
  }

  @return $default-car-config;
}

// Enhanced mixin for car shadow with conditional center area and X/Y offset support
@mixin car-shadow($car-key: null) {
  $shadow-height: get-car-config($car-key, shadow-height);
  $shadow-width: get-car-config($car-key, shadow-width);
  $shadow-smoothness: get-car-config($car-key, shadow-smoothness);
  $shadow-space: get-car-config($car-key, shadow-space);
  $shadow-opacity: get-car-config($car-key, shadow-opacity);
  $shadow-wheel-multiplier: get-car-config($car-key, shadow-wheel-multiplier);
  $shadow-center-multiplier: get-car-config($car-key, shadow-center-multiplier);
  $shadow-offset-x: get-car-config($car-key, shadow-offset-x);
  $shadow-offset-y: get-car-config($car-key, shadow-offset-y);

  // Calculate actual opacity values based on base opacity
  $fade-opacity: $shadow-opacity; // Fade areas use base opacity
  $wheel-opacity: $shadow-opacity * $shadow-wheel-multiplier; // Wheel areas are multiplied
  $center-opacity: $shadow-opacity * $shadow-center-multiplier; // Center area is multiplied

  // Clamp opacities to valid range (0-1)
  $fade-opacity: min(max($fade-opacity, 0), 1);
  $wheel-opacity: min(max($wheel-opacity, 0), 1);
  $center-opacity: min(max($center-opacity, 0), 1);

  // Calculate common shadow positioning
  $shadow-offset: calc((100% - #{$shadow-width}) / 2); // Center the shadow
  $fade-in-end: calc(#{$shadow-offset} + #{$shadow-smoothness});
  $fade-out-start: calc(100% - #{$shadow-offset} - #{$shadow-smoothness});
  $shadow-end: calc(100% - #{$shadow-offset});

  &::after {
    content: "";
    position: absolute;

    // Apply offsets to positioning
    bottom: #{$shadow-offset-y};
    left: #{$shadow-offset-x};

    width: 100%;
    height: $shadow-height;

    // Build gradient stops dynamically
    $gradient-stops: (
      // Initial transparent areas and fade-in
      transparent 0%,
      transparent $shadow-offset,
      rgba(0, 0, 0, $fade-opacity) $fade-in-end
    );

    @if $shadow-space == null {
      // Continuous shadow - simple uniform shadow across the width
      $content-start: calc(#{$fade-in-end} + 2%);
      $content-end: calc(#{$fade-out-start} - 2%);

      $gradient-stops: append(
        $gradient-stops,
        rgba(0, 0, 0, $wheel-opacity) $content-start,
        comma
      );
      $gradient-stops: append(
        $gradient-stops,
        rgba(0, 0, 0, $wheel-opacity) $content-end,
        comma
      );
    } @else {
      // Wheel-based shadow - add left wheel, center, and right wheel areas
      $wheel-area: calc((#{$shadow-width} - #{$shadow-space}) / 2);
      $left-wheel-end: calc(
        #{$shadow-offset} + #{$wheel-area} - #{$shadow-smoothness}
      );
      $center-start: calc(
        #{$shadow-offset} + #{$wheel-area} + #{$shadow-smoothness}
      );
      $center-end: calc(
        100% - #{$shadow-offset} - #{$wheel-area} - #{$shadow-smoothness}
      );
      $right-wheel-start: calc(#{$center-end} + #{$shadow-smoothness});

      $content-start: calc(#{$fade-in-end} + 2%);
      $content-end: calc(#{$fade-out-start} - 2%);

      // Left wheel area
      $gradient-stops: append(
        $gradient-stops,
        rgba(0, 0, 0, $wheel-opacity) $content-start,
        comma
      );
      $gradient-stops: append(
        $gradient-stops,
        rgba(0, 0, 0, $wheel-opacity) $left-wheel-end,
        comma
      );

      // Center transition and area
      $gradient-stops: append(
        $gradient-stops,
        rgba(0, 0, 0, $center-opacity) $center-start,
        comma
      );
      $gradient-stops: append(
        $gradient-stops,
        rgba(0, 0, 0, $center-opacity) $center-end,
        comma
      );

      // Right wheel area
      $gradient-stops: append(
        $gradient-stops,
        rgba(0, 0, 0, $wheel-opacity) $right-wheel-start,
        comma
      );
      $gradient-stops: append(
        $gradient-stops,
        rgba(0, 0, 0, $wheel-opacity) $content-end,
        comma
      );
    }

    // Final fade out and transparent areas
    $gradient-stops: append(
      $gradient-stops,
      rgba(0, 0, 0, $fade-opacity) $fade-out-start,
      comma
    );
    $gradient-stops: append($gradient-stops, transparent $shadow-end, comma);
    $gradient-stops: append($gradient-stops, transparent 100%, comma);

    background: linear-gradient(to right, $gradient-stops) no-repeat 0 0 / 100%
      100%;

    // Automatic 50/50 perspective fade mask
    mask: linear-gradient(
      to top,
      rgba(255, 255, 255, 1) 0%,
      rgba(255, 255, 255, 0) 50%
    );

    z-index: 1;
  }
}
